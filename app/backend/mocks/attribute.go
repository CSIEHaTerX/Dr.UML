// Code generated by MockGen. DO NOT EDIT.
// Source: .\backend\component\attribute\attribute.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	attribute "Dr.uml/backend/component/attribute"
	drawdata "Dr.uml/backend/drawdata"
	duerror "Dr.uml/backend/utils/duerror"
	gomock "github.com/golang/mock/gomock"
)

// MockIAttribute is a mock of IAttribute interface.
type MockIAttribute struct {
	ctrl     *gomock.Controller
	recorder *MockIAttributeMockRecorder
}

// MockIAttributeMockRecorder is the mock recorder for MockIAttribute.
type MockIAttributeMockRecorder struct {
	mock *MockIAttribute
}

// NewMockIAttribute creates a new mock instance.
func NewMockIAttribute(ctrl *gomock.Controller) *MockIAttribute {
	mock := &MockIAttribute{ctrl: ctrl}
	mock.recorder = &MockIAttributeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAttribute) EXPECT() *MockIAttributeMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockIAttribute) Copy() (*attribute.Attribute, duerror.DUError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(*attribute.Attribute)
	ret1, _ := ret[1].(duerror.DUError)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockIAttributeMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIAttribute)(nil).Copy))
}

// GetContent mocks base method.
func (m *MockIAttribute) GetContent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockIAttributeMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockIAttribute)(nil).GetContent))
}

// GetDrawData mocks base method.
func (m *MockIAttribute) GetDrawData() drawdata.Attribute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrawData")
	ret0, _ := ret[0].(drawdata.Attribute)
	return ret0
}

// GetDrawData indicates an expected call of GetDrawData.
func (mr *MockIAttributeMockRecorder) GetDrawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrawData", reflect.TypeOf((*MockIAttribute)(nil).GetDrawData))
}

// GetSize mocks base method.
func (m *MockIAttribute) GetSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockIAttributeMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockIAttribute)(nil).GetSize))
}

// GetStyle mocks base method.
func (m *MockIAttribute) GetStyle() attribute.Textstyle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStyle")
	ret0, _ := ret[0].(attribute.Textstyle)
	return ret0
}

// GetStyle indicates an expected call of GetStyle.
func (mr *MockIAttributeMockRecorder) GetStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStyle", reflect.TypeOf((*MockIAttribute)(nil).GetStyle))
}

// IsBold mocks base method.
func (m *MockIAttribute) IsBold() (bool, duerror.DUError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBold")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(duerror.DUError)
	return ret0, ret1
}

// IsBold indicates an expected call of IsBold.
func (mr *MockIAttributeMockRecorder) IsBold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBold", reflect.TypeOf((*MockIAttribute)(nil).IsBold))
}

// IsItalic mocks base method.
func (m *MockIAttribute) IsItalic() (bool, duerror.DUError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsItalic")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(duerror.DUError)
	return ret0, ret1
}

// IsItalic indicates an expected call of IsItalic.
func (mr *MockIAttributeMockRecorder) IsItalic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsItalic", reflect.TypeOf((*MockIAttribute)(nil).IsItalic))
}

// IsUnderline mocks base method.
func (m *MockIAttribute) IsUnderline() (bool, duerror.DUError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnderline")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(duerror.DUError)
	return ret0, ret1
}

// IsUnderline indicates an expected call of IsUnderline.
func (mr *MockIAttributeMockRecorder) IsUnderline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnderline", reflect.TypeOf((*MockIAttribute)(nil).IsUnderline))
}

// RegisterUpdateParentDraw mocks base method.
func (m *MockIAttribute) RegisterUpdateParentDraw(arg0 func() duerror.DUError) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUpdateParentDraw", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// RegisterUpdateParentDraw indicates an expected call of RegisterUpdateParentDraw.
func (mr *MockIAttributeMockRecorder) RegisterUpdateParentDraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdateParentDraw", reflect.TypeOf((*MockIAttribute)(nil).RegisterUpdateParentDraw), arg0)
}

// SetBold mocks base method.
func (m *MockIAttribute) SetBold(arg0 bool) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBold", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetBold indicates an expected call of SetBold.
func (mr *MockIAttributeMockRecorder) SetBold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBold", reflect.TypeOf((*MockIAttribute)(nil).SetBold), arg0)
}

// SetContent mocks base method.
func (m *MockIAttribute) SetContent(arg0 string) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContent", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetContent indicates an expected call of SetContent.
func (mr *MockIAttributeMockRecorder) SetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContent", reflect.TypeOf((*MockIAttribute)(nil).SetContent), arg0)
}

// SetFontFile mocks base method.
func (m *MockIAttribute) SetFontFile(arg0 string) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFontFile", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetFontFile indicates an expected call of SetFontFile.
func (mr *MockIAttributeMockRecorder) SetFontFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFontFile", reflect.TypeOf((*MockIAttribute)(nil).SetFontFile), arg0)
}

// SetItalic mocks base method.
func (m *MockIAttribute) SetItalic(arg0 bool) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItalic", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetItalic indicates an expected call of SetItalic.
func (mr *MockIAttributeMockRecorder) SetItalic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItalic", reflect.TypeOf((*MockIAttribute)(nil).SetItalic), arg0)
}

// SetSize mocks base method.
func (m *MockIAttribute) SetSize(arg0 int) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSize", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetSize indicates an expected call of SetSize.
func (mr *MockIAttributeMockRecorder) SetSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSize", reflect.TypeOf((*MockIAttribute)(nil).SetSize), arg0)
}

// SetStyle mocks base method.
func (m *MockIAttribute) SetStyle(arg0 attribute.Textstyle) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStyle", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetStyle indicates an expected call of SetStyle.
func (mr *MockIAttributeMockRecorder) SetStyle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStyle", reflect.TypeOf((*MockIAttribute)(nil).SetStyle), arg0)
}

// SetUnderline mocks base method.
func (m *MockIAttribute) SetUnderline(arg0 bool) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnderline", arg0)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetUnderline indicates an expected call of SetUnderline.
func (mr *MockIAttributeMockRecorder) SetUnderline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnderline", reflect.TypeOf((*MockIAttribute)(nil).SetUnderline), arg0)
}
