@startuml
autonumber
group#gold #white openProject
    autoactivate on
    participant ":UI"
    participant ":UMLProject"
    
    ":UI" -> ":UMLProject": openProject()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> ":UMLProject": diagrams = getAvailableDiagrams()
    return
    note right of ":UMLProject" #red: by Expert (UI want to know the diagram)
    note right of ":UMLProject": getAvailableDiagrams() returns names of diagrams in the project.

    ":UMLProject" -> ":UMLProject": lastOpenedDiagrams = getLastOpenedDiagrams()
    note right of ":UMLProject" #red: by Expert (UI want to know the lastOpenedDiagrams)
    note right of ":UMLProject": getLastOpenedDiagrams() returns names of diagrams that were opened last time
    return 

    loop#gold #white diagramName in lastOpenedDiagrams
        ":UMLProject" --> "diagram:UMLDiagram" ** : createDiagram(diagramName)
        note right of ":UMLProject" #red: by Creator
        note right of ":UMLProject": createDiagram(path) creates a new instance of the diagram and load the diagram info at path
        participant "activeDiagrams\n:[]UMLDiagram"
        ":UMLProject" -> "activeDiagrams\n:[]UMLDiagram": append(diagram)
        return
        note right of ":UMLProject": append is a built-in function
        note right of ":UMLProject": we only load and maintain the diagrams that were opened as tabs

    return lastOpenedDiagrams, diagrams
end
@enduml


@startuml
autonumber
autoactivate on
group#gold #white selectDiagram
    ":UI" -> ":UMLProject": selectDiagram(diagramName)
    note right of ":UI" #red: by Controller
    opt#gold #white diagramName not in activeDiagrams
        note right of ":UMLProject": load the selected diamgram if it has not been loaded
        ":UMLProject" --> "diagram:UMLDiagram" ** :  createDiagram(diagramName)"
        note right of ":UMLProject" #red: by Creator
        ":UMLProject" -> ":UMLProject": activeDiagrams = append(activeDiagrams, diagram)
        note right of ":UMLProject": append is a built-in function
        return
    end
    ":UMLProject" -> ":UMLProject" : currentDiagram = activeDiagrams[diagramName]
    return 
    return
end selectDiagram
@enduml


@startuml
autonumber
autoactivate on
group#gold #white addGadgetToDiagram
   ":UI" -> ":UMLProject": addGadget(gadgetType, point)
    note right of ":UI" #red: by Controller
        ":UMLProject" -> "currentDiagram\n:*UMLDiagram"  : addGadget(gadgetType, point)
           "currentDiagram\n:*UMLDiagram" -> ":Components"  : addGadget(gadgetType, point)
                ":Components"  --> "gadget:Gadget" **  : createGadget(gadgetType, point)
                note right of ":Components" #red: by Creator
                ":Components" -> ":Components": components = append(components, gadget)
                note right of ":Components": append is a built-in function
                return
                return
            return
        return
end addGadgetToDiagram
@enduml


@startuml
autonumber
autoactivate on
group#gold #white addAssociationToDiagram
    ":UI" -> ":UMLProject": addAssociation(type, point)
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": addAssociation(type, point)
    "currentDiagram\n:*UMLDiagram" -> ":Components"  : addAssociation(type, point)
    ":Components"  --> "ass:Association" ** : createAssociation(type, point)
    /'createAssociation'/
    note right of ":Components" #red: by Creator
    ":Components" -> ":Components" : adjustAssociationPath(*association)
    note right of ":Components": adjust the pathing of newly created association to prevent overlapping
    return
    ":Components" -> ":Components": components = append(components, ass)
    note right of ":Components": append is a built-in function
    return
    return
    return
    return
end assAssoiationToDiagram
@enduml


@startuml
autonumber
autoactivate on
group#gold #white selectComponent
    ":UI" -> ":UMLProject": selectComponent(point)
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": selectComponent(point)
    "currentDiagram\n:*UMLDiagram" -> ":Components": selectComponent(point)
    loop#gold #white component covering point
        ":Components" -> ":Components": selectedComponents = append(selectedComponents, &component)
        note right of ":Components": append is a built-in function
        return
        note right of ":Components": add component to a list of selected-component pointers
    end loop
    
    opt#gold #white only select one component
        ":Components" -> "SelectedComponent\n:Component": setupProperty()
        note right of ":Components": register the property of this component to property manager
        "SelectedComponent\n:Component" -> ":PropertyManager": setupProperty(this)
        return
        return
    else
        ":Components" -> ":PropertyManager": clearProperty()
        return
    end

    return
    return
    return
end selectComponent
@enduml


@startuml
autonumber
autoactivate on
group#gold #white unselectComponent
    ":UI" -> ":UMLProject": unselectComponent(mousePos)
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": unselectComponent(mousePos)
    "currentDiagram\n:*UMLDiagram" -> ":Components": unselectComponent(mousePos)
    loop#gold #white component cover mousePos
        ":Components" -> ":Components": delete(selectedComponents, component)
        note right of ":Components": delete is a built-in function
        return
    end loop

    ref over ":Components" , ":PropertyManager" : updateProperty (same logic as selectComponent)
    return
    return
    return
end unselectComponent
@enduml


@startuml
group#gold #white unselectAllComponents
autonumber
autoactivate on
    ":UI" -> ":UMLProject": unselectAllComponents()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": unselectAllComponents()
    "currentDiagram\n:*UMLDiagram" -> ":Components": unselectAllComponents()
    ":Components" -> ":Components": selectedComponents = []
    return
    ":Components" -> ":PropertyManager": clearProperty()
    return
    return
    return
    return
end unselectAll
@enduml


@startuml
autonumber
autoactivate on
group#gold #white copyComponents
    ":UI" -> ":UMLProject": CopyComponents()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ExportSubmodule("clipboard")
    note over ":UMLProject"
    "clipboard" is a special submodule
    containing the components user copied.
    end note
    "currentDiagram\n:*UMLDiagram" -> ":Components": ExportSubmodule("clipboard")
    ":Components" -> ":Components": exportCompoents = getGroupComponents().copies()
    return
    note over ":Components": getGroupComponents() return gadgets and associations.\nAs for every association, its parents are also included.
    ":Components" -> ":Submodule":  <<static>>\nExportSubmodule("clipboard", exportCompoents)
    return
    return
    return
    return
end copyComponents
@enduml


@startuml
autonumber
autoactivate on
group#gold #white pasteComponents
    ":UI" -> ":UMLProject": PasteComponents(point)
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ImportSubmodule("clipboard", point)
    ref over ":UMLProject" , "currentDiagram\n:*UMLDiagram" : import submodule
    return
    return
end pasteComponents
@enduml


@startuml
autonumber
autoactivate on
group#gold #white importSubmodule
    ":UI" -> ":UMLProject": importSubmodule(submoduleName, point)
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": ImportSubmodule(submoduleName, point)
    "currentDiagram\n:*UMLDiagram" -> ":Components": ImportSubmodule(submoduleName, point)
    ":Components" -> ":Submodule":  <<static>>\nimportCompnents = ImportSubmodule(submoduleName)
    return
    note right of ":Components" #red:y byE Expert (components class wants to know the components in that submodule)
    loop#gold #white component in importComponents
        ":Components" -> "component:Component": moveDelta(point)
        return
        ":Components" -> ":Components": components = append(components, component)
        note right of ":Components": append is a built-in function
        return
    end
    return
    return
    return
end importSubmodule
@enduml


@startuml
autonumber
autoactivate on
group#gold #white updateProperty
    ":UI" -> ":propertyManager": updateProperty(name, value)
autonumber
autoactivate on
group#gold #white moveComponent

":UI" -> ":UMLProject" : startDragging(point)
note right of ":UI" #red: by Controller
":UMLProject" -> "currentDiagram:*UMLDiagram" : startDragging(point)
"currentDiagram:*UMLDiagram" -> ":Components" : isSelectedComponentsEmpty()
return
opt !isSelectedEmpty
"currentDiagram:*UMLDiagram" -> "currentDiagram:*UMLDiagram" : setStartPoint(point)
return
return
return
end opt
return
return
return
...
":UI" ->":UMLProject" : stopMovingComponent(point)
note right of ":UI" #red: by Controller
":UMLProject" -> "currentDiagram:*UMLDiagram" : stopDragging(point)
"currentDiagram:*UMLDiagram" -> ":Components" : isSelectedComponentsEmpty()
return
opt !isSelectedEmpty
"currentDiagram:*UMLDiagram" ->"currentDiagram:*UMLDiagram" : delta = getDelta(point)
return
"currentDiagram:*UMLDiagram" -> "currentDiagram:*UMLDiagram" : clearStartPoint()
return
"currentDiagram:*UMLDiagram" -> ":Components" : moveSelectedComponent(delta)
loop#gold component in Components::selectedComponents
    ":Components" -> "component:Component" : moveDelta(delta)
    note over ":Components" , "component:Component"
        For a gadget, This function simply moves its position by
         (deltaX, deltaY), while an associate one also reroutes
         with some cool(or lame) algorithm.
    end note
    return
end loop
return
return
end opt
return
end moveComponent
@enduml
    ":propertyManager" -> ":propertyManager" : update(name, value)
    return
    return
end updateProperty
@enduml


@startuml 
/'undo'/
autoactivate on
group#gold #white undo
    ":UI" -> ":UMLProject" : undo()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram:UMLDiagram" : undo()
    note right 
    UMLDiagram::undo() {
        if (undoDeque.size() > 0) {
            auto& command = undoDeque.top();
            // void UMLDiagram::doCommand(ICommand* command, bool reverse = false)
            this->doCommand(command, true);
            undoDeque.pop();
            redoDeque.push(command);
        }
    }
    end note
    return
    return
end undo
@enduml


@startuml 
/'redo'/
autoactivate on
group#gold #white redo
    ":UI" -> ":UMLProject" : redo()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram:UMLDiagram" : redo()
    note right 
    UMLDiagram::undo() {
        if (redoDeque.size() > 0) {
            auto& command = redoDeque.top();
            this->doCommand(command);
            redoDeque.pop();
            undoDeque.push(command);
        }
    }
    end note
    return
    return
end undo
@enduml


@startuml
autonumber
autoactivate on
group#gold #white deleteComponent
    ":UI" -> ":UMLProject": deleteComponent()
    note right of ":UI" #red: by Controller
    ":UMLProject" -> "currentDiagram\n:*UMLDiagram": deleteComponent()
    "currentDiagram\n:*UMLDiagram" -> ":Components": deleteComponent()

    ":Components" -> ":Components": removeComponents = getGroupComponents()
    return
    note right
    ":Components": getGroupComponents() return gadgets and associations.
    As for every association, its parents are also included.
    end note
    loop#gold #white component in removeComponents
        ":Components" -> ":Components": delete(component)
        return
    end

    return
    return
    return
end deleteComponent
@enduml


@startuml
autonumber
autoactivate on
group#gold #white moveComponent

":UI" -> ":UMLProject" : startDragging(point)
note right of ":UI" #red: by Controller
":UMLProject" -> "currentDiagram:*ULDiagram" : startDragging(point)
"currentDiagram:*ULDiagram" -> ":Components" : isSelectedComponentsEmpty()
return
opt !isSelectedEmpty
"currentDiagram:*ULDiagram" -> "currentDiagram:*ULDiagram" : setStartPoint(point)
return
return
end opt
return
...
":UI" ->":UMLProject" : stopDragging(point)
note right of ":UI" #red: by Controller
":UMLProject" -> "currentDiagram:*ULDiagram" : stopDragging(point)
"currentDiagram:*ULDiagram" -> ":Components" : isSelectedComponentsEmpty()
return
opt !isSelectedEmpty
"currentDiagram:*ULDiagram" ->"currentDiagram:*ULDiagram" : delta = getDelta(point)
return
"currentDiagram:*ULDiagram" -> "currentDiagram:*ULDiagram" : clearStartPoint()
return
"currentDiagram:*ULDiagram" -> ":Components" : moveSelectedComponent(delta)
loop#gold component in Components::selectedComponents
    ":Components" -> "component:Component" : moveDelta(delta)
    note over ":Components" , "component:Component"
        For a gadget, This function simply moves its position by
         (deltaX, deltaY), while an associate one also reroutes
         with some cool(or lame) algorithm.
    end note
    return
end loop
return
return
end opt
return
end moveComponent
@enduml


' ❌*d When User drags Gadget with multiple Associations, System will automatically arrange them
' ❌4.e User can modify the path of an Association
